@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix r2h: <http://rdf2h.github.io/2015/rdf2h#> .
@prefix r2hp: <http://rdf2h.github.io/2015/rdf2h-points/> .
@prefix dc: <http://dublincore.org/2012/06/14/dcelements#>.
@prefix gont: <https://gont.ch/> .
@prefix mode: <http://zazukoians.github.org/rdf2h/modes#> .


<pyramid> a r2h:Matcher ;
    r2h:triplePattern [      
        r2h:subject r2h:this;
        r2h:predicate gont:populationSegment
    ];
    r2h:template [ 
        r2h:mustache '''
            <script>
                window.populationData = new Array();
            </script>
            {{{:continue}}}
            <script>
                System.import("//d3js.org/d3.v3.min.js").then(function(){
                    function displayPyramid() {
                        // SET UP DIMENSIONS
                        var w = 500,
                            h = 300;

                        // margin.middle is distance from center line to each y-axis
                        var margin = {
                          top: 20,
                          right: 20,
                          bottom: 24,
                          left: 20,
                          middle: 28
                        };

                        // the width of each side of the chart
                        var regionWidth = w/2 - margin.middle;

                        // these are the x-coordinates of the y-axes
                        var pointA = regionWidth,
                            pointB = w - regionWidth;


                        // GET THE TOTAL POPULATION SIZE AND CREATE A FUNCTION FOR RETURNING THE PERCENTAGE
                        var totalPopulation = d3.sum(window.populationData, function(d) { return d.male + d.female; }),
                            percentage = function(d) { return d / totalPopulation; };


                        // CREATE SVG
                        var svg = d3.select($('script').last().parent().get(0)).append('svg')
                          .attr('width', margin.left + w + margin.right)
                          .attr('height', margin.top + h + margin.bottom)
                          // ADD A GROUP FOR THE SPACE WITHIN THE MARGINS
                          .append('g')
                            .attr('transform', translation(margin.left, margin.top));

                        // find the maximum data value on either side
                        //  since this will be shared by both of the x-axes
                        var maxValue = Math.max(
                          d3.max(window.populationData, function(d) { return percentage(d.male); }),
                          d3.max(window.populationData, function(d) { return percentage(d.female); })
                        );

                        // SET UP SCALES

                        // the xScale goes from 0 to the width of a region
                        //  it will be reversed for the left x-axis
                        var xScale = d3.scale.linear()
                          .domain([0, maxValue])
                          .range([0, regionWidth])
                          .nice();

                        var xScaleLeft = d3.scale.linear()
                          .domain([0, maxValue])
                          .range([regionWidth, 0]);

                        var xScaleRight = d3.scale.linear()
                          .domain([0, maxValue])
                          .range([0, regionWidth]);

                        var yScale = d3.scale.ordinal()
                          .domain(window.populationData.map(function(d) { return d.group; }))
                          .rangeRoundBands([h,0], 0.1);


                        // SET UP AXES
                        var yAxisLeft = d3.svg.axis()
                          .scale(yScale)
                          .orient('right')
                          .tickSize(4,0)
                          .tickPadding(margin.middle-4);

                        var yAxisRight = d3.svg.axis()
                          .scale(yScale)
                          .orient('left')
                          .tickSize(4,0)
                          .tickFormat('');

                        var xAxisRight = d3.svg.axis()
                          .scale(xScale)
                          .orient('bottom')
                          .ticks(5)
                          .tickFormat(d3.format('%'));

                        var xAxisLeft = d3.svg.axis()
                          // REVERSE THE X-AXIS SCALE ON THE LEFT SIDE BY REVERSING THE RANGE
                          .scale(xScale.copy().range([pointA, 0]))
                          .orient('bottom')
                          .ticks(5)
                          .tickFormat(d3.format('%'));

                        // MAKE GROUPS FOR EACH SIDE OF CHART
                        // scale(-1,1) is used to reverse the left side so the bars grow left instead of right
                        var leftBarGroup = svg.append('g')
                          .attr('transform', translation(pointA, 0) + 'scale(-1,1)');
                        var rightBarGroup = svg.append('g')
                          .attr('transform', translation(pointB, 0));

                        // DRAW AXES
                        svg.append('g')
                          .attr('class', 'axis y left')
                          .attr('transform', translation(pointA, 0))
                          .call(yAxisLeft)
                          .selectAll('text')
                          .style('text-anchor', 'middle');

                        svg.append('g')
                          .attr('class', 'axis y right')
                          .attr('transform', translation(pointB, 0))
                          .call(yAxisRight);

                        svg.append('g')
                          .attr('class', 'axis x left')
                          .attr('transform', translation(0, h))
                          .call(xAxisLeft);

                        svg.append('g')
                          .attr('class', 'axis x right')
                          .attr('transform', translation(pointB, h))
                          .call(xAxisRight);

                        // DRAW BARS
                        leftBarGroup.selectAll('.bar.left')
                          .data(window.populationData)
                          .enter().append('rect')
                            .attr('class', 'bar left')
                            .attr('x', 0)
                            .attr('y', function(d) { return yScale(d.group); })
                            .attr('width', function(d) { return xScale(percentage(d.male)); })
                            .attr('height', yScale.rangeBand());

                        rightBarGroup.selectAll('.bar.right')
                          .data(window.populationData)
                          .enter().append('rect')
                            .attr('class', 'bar right')
                            .attr('x', 0)
                            .attr('y', function(d) { return yScale(d.group); })
                            .attr('width', function(d) { return xScale(percentage(d.female)); })
                            .attr('height', yScale.rangeBand());


                        // so sick of string concatenation for translations
                        function translation(x,y) {
                          return 'translate(' + x + ',' + y + ')';
                        }
                    };
                    displayPyramid();    
                });
            </script>

            '''
    ];
    r2h:before <pyramidSorter>.

<pyramidSorter> r2h:before [ a r2h:Matcher ;
    r2h:triplePattern [      
        r2h:subject r2h:this;
        r2h:predicate gont:populationSegment
    ];
    r2h:template [ 
        r2h:javaScript '''function(n) {
            var result = "";
            var segments = n.graphNode.out(RDF2h.resolveCurie("gont:populationSegment")).toArray();
            segments.sort(function(a,b) {
               var fa = RDF2h.resolveCurie("gont:fromAge");
               return +a.out(fa) - +b.out(fa);
            });
            segments.forEach(function(s) {
                result += n.rdf2h.render(n.graph, s.nodes()[0], n.context);
            });
            return result;
        }'''
    ];
    r2h:before <segment>;
].

<segment> r2h:before [ a r2h:Matcher ;
    r2h:triplePattern [      
        r2h:subject r2h:this;
        r2h:predicate gont:toAge
    ];
    r2h:template [ 
        r2h:mustache '''
<script>

window.populationData.push({
    group: '{{gont:fromAge}} - {{gont:toAge}}', 
    male: {{gont:malePopulation}} , 
    female: {{gont:femalePopulation}}
});
</script>
'''
    ];
    r2h:before r2hp:specific;
].
